#+Title: Putting the Blocks Together
#+Author: James Henderson - Likely
#+Email: james@jarohen.me.uk

#+REVEAL_THEME: night
#+REVEAL_EXTRA_CSS: css/main.css
#+OPTIONS: num:nil toc:nil reveal_history:t reveal_center:nil
#+REVEAL_TRANS: fade

* What's coming up?

*Setting up a CLJS project*

*All Mod Cons*

*Experiences and UI Patterns*

*Putting the Blocks Together!*

** 
:PROPERTIES:
:reveal_background: ./img/cat.jpeg
:reveal_background_trans: slide
:END:

* Setting up a CLJS project

- Web server (ring/http-kit)
  - Serving page frame and compiled JS

#+ATTR_REVEAL: :frag roll-in
- nREPL
  - Make changes to the running web-app

#+ATTR_REVEAL: :frag roll-in
- lein-cljsbuild
  - Re-compiles CLJS when the files change

** SPLAT - A Lein template

#+begin_src sh
lein new splat <your-project>
cd <your-project>
lein dev
#+end_src

- [[http://http-kit.org][http-kit]] web server
- Basic handlers
- 'Hello world from ClojureScript'
- CLJ/CLJS REPL (provided by [[https://github.com/cemerick/austin][Austin]] + [[https://github.com/james-henderson/lein-frodo][lein-frodo]])
- `lein dev` alias for cljsbuild auto-compilation + web server

#+ATTR_REVEAL: :frag roll-in
We need this for most CLJS projects, hence the template!


** Main Differences from Clojure

Interop function invocation

#+begin_src clojure
(.log js/console "Hello world!")
(js/console.log "Hello world!")
#+end_src

Field access

#+begin_src clojure
(.-body js/document)
(set! (.-hash js/location) "#/")
#+end_src

No Refs/Agents/STM

Must split out requires into ':require' and ':require-macros'

#+begin_src clojure
(ns your.namespace
  (:require [cljs.core.async :as a])
  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))
#+end_src
  


** 
# DEMO - Hello world in ClojureScript

* All Mod Cons

*Getting to the same toolset and development practices that we take for granted in Clojure*

** All Mod Cons - REPL

How does a CLJS REPL work?

#+BEGIN_SRC clojure
  (loop []
    ;; Browser told to request an HTTP route
    ;; Response contains JS to execute
    ;; Browser sends result in next request, waits for next command
    (recur))
#+END_SRC 

*** So, we need:

- Some nREPL middleware to provide the CLJS REPL
- A JS snippet in page-frame to connect to the CLJS REPL
- To start the CLJS REPL

#+ATTR_REVEAL: :frag roll-in
Again, we need this for most CLJS projects, so 'lein-frodo' plugin will set these up.

*** 
# DEMO - REPL

* Experiences and UI Patterns

/*Caveats*/

None of the theory behind these patterns is new! 

I'll be showing how I've applied some existing UI development best
practices in ClojureScript

These are patterns that I've found myself settling into after having
implemented a variety of different webapps

ClojureScript is still (relatively) new and I'm very much still
learning - any advice/feedback gratefully received!

* Of Widgets and Models

#+BEGIN_HTML
<img src="img/widgets-models.svg" />
#+END_HTML

** core.async

*core.async* is a new library for Clojure and ClojureScript to
facilitate asynchronous communication while still coding in a
synchronous manner

The main abstraction is channels:

#+BEGIN_SRC clojure
  (require '[clojure.core.async :as a])
  
  (let [my-ch (a/chan)]
    (a/put! my-ch "Hello!"))
#+END_SRC

*** core.async - 'go' and 'go-loop'

The '=go=' macro translates synchonous code into asynchronous code:

#+BEGIN_SRC clojure
  (require '[clojure.core.async :as a :refer [<! >! go]])
  
  (let [my-ch (a/chan)]
    (go
     (let [msg (<! my-ch)]
       (println "Received message:" (pr-str msg))))
  
    (go
     (>! my-ch "Hello other go-block!")
     (println "Message sent and acknowledged")))
  
  ;; =>
  ;; Received message: "Hello other go-block!"
  ;; Message sent and acknowledged
  
  (let [my-ch (a/chan)]
    (go-loop []
      (when-let [msg (<! my-ch)]
        (println "Received message:" (pr-str msg))
        (recur))))
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
Covering the full potential of =core.async= is a talk in itself!

** An example widget

#+begin_src clojure
  (defprotocol GameBoardComponent
    (board->node [_])
    (color-cells! [_ cells color])
    (event-ch [_]))
  
  (defn make-canvas-component []
    (reify GameBoardComponent
      (board->node [] ...)
      (color-cells! [_ cells color] ...)
      (event-ch [_] ...)))

  (defn watch-model! [game-board !model] ...)
  (defn listen-for-keypresses! [game-board command-ch] ...)
  
  (defn make-board-widget [!model command-ch]
    (let [game-board (doto (make-canvas-component)
                       (watch-model! !model)
                       (listen-for-keypresses! command-ch))]
  
      (board->node game-board)))
#+end_src

** An example widget

#+begin_src clojure
  (defprotocol GameBoardComponent
    (board->node [_])
    (color-cells! [_ cells color])
    (event-ch [_]))
  
  (defn make-canvas-component [] ...)
  
  (defn watch-model! [game-board !model]
    (add-watch! !model ::game-board
                (fn [_ _ old-model new-model]
                  ;; update DOM component
                  )))
  
  (defn listen-for-keypresses! [game-board command-ch]
    (a/pipe (event-ch game-board) command-ch))
  
  (defn make-board-widget [!model command-ch]
    (let [game-board (doto (make-canvas-component)
                       (watch-model! !model)
                       (listen-for-keypresses! command-ch))]
      
      (board->node game-board)))
#+end_src

** An example model

#+begin_src clojure
  (defn apply-tick [old-model]
    ;; tick logic goes here
    new-model)
  
  (defn repeatedly-tick! [!model]
    (go-loop []
      (<! (a/timeout 1000))
      (swap! !model apply-tick)
      (recur)))
  
  (defn apply-commands! [!model command-ch] ...)
  
  (defn wire-up-model! [!model command-ch]
    (doto !model
      (repeatedly-tick!)
      (apply-commands! command-ch)))
#+end_src

** An example model

#+begin_src clojure
  (defn repeatedly-tick! [!model] ...)
  
  (defmulti apply-command (fn [old-model command] command))
  
  (defmethod apply-command :piece-left [old-model _]
    ;; command logic goes here
    new-model)
  
  (defmethod apply-command :piece-right [old-model _]
    ;; command logic goes here
    new-model)
  
  (defn apply-commands! [!model command-ch]
    (go-loop []
      (when-let [command (<! command-ch)]
        (swap! model apply-command command)
        (recur))))
  
  (defn wire-up-model! [!model command-ch]
    (doto !model
      (repeatedly-tick!)
      (apply-commands! command-ch)))
#+end_src

** Wiring them up:

#+begin_src clojure
(set! (.-onload js/document)
  (fn []
    (let [!model (atom {})
          command-ch (a/chan)]

      (d/replace-contents! (sel1 :#content)
        (node (make-board-widget !model command-ch)))

      (wire-up-model! !model command-ch))))
#+end_src

** 

* Server-client communication - WebSockets

=core.async= channels seem to be the ideal abstraction over
JavaScript's raw WebSockets

*Chord* is a library for bringing together Clojure/ClojureScript,
core.async and WebSockets:


#+BEGIN_SRC clojure
  ;; Clojure:
  (require '[clojure.core.async :refer [<! >! go-loop]])
  (require '[chord.http-kit :refer [with-channel]])
    
  (defn your-handler [req]
    (with-channel req web-socket-ch
      (go-loop []
        (when-let [{:keys [message]} (<! web-socket-ch)]
          (println "Received message:" message)
          (>! web-socket-ch (format "You said: '%s'" message))
          (recur)))))
#+END_SRC
** Server-client communication - WebSockets

=core.async= channels seem to be the ideal abstraction over
JavaScript's raw WebSockets

*Chord* is a library for bringing together Clojure/ClojureScript,
core.async and WebSockets:


#+BEGIN_SRC clojure
  ;; ClojureScript:
  (:require [cljs.core.async :refer [<! >! close!]]
            [chord.client :refer [ws-ch]])
  (:require-macros [cljs.core.async.macros :refer [go]])
  
  (go
   (let [ws-conn (<! (ws-ch "ws://localhost:3000/socket"))]
     (>! "Hello server from client!")
     (js/console.log "From server:" (:message (<! ws-conn)))
     (close! ws-conn)))
#+END_SRC

** 

* Wrapping up

Tetris is deployed (at least throughout ClojureX) at 

http://tetris.jarohen.me.uk

Slides/references for this talk are at 

https://github.com/james-henderson/clojurex2013/blob/master/talk-notes.org

#+ATTR_REVEAL: :frag roll-in
Happy to take any questions!

** 
#+BEGIN_HTML
    <div style="float:left;">
      <br />
      <h3>James Henderson</h3>
      <h4>Likely</h4>
      <p><a href="https://twitter.com/jarohen"><strong>@jarohen</strong></a></p>
      <p><a href="https://github.com/james-henderson"><strong>github/james-henderson</strong></a></p>
    </div>
    
    <div style="float:right;">
      <p>Slides/references:</p>
      <img src="img/qrcode.png" style="height: 15em; width: 15em" />
    </div>
    
    <div style="clear:both" />
#+END_HTML
