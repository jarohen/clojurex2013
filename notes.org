* ClojureX 2013
** Introduction - Me/Talk
*** Slides
**** Me
**** Likely
**** Points to note
***** Links wiki
***** Shameless plugging
**** Outline
***** Setting up a CLJS project
***** All Mod Cons
****** Getting to the same toolset that we take for granted in Clojure
****** Starting a REPL
****** REPL development
***** Experiences and UI Patterns
****** A number of patterns that I have found useful
******* Patterns themselves not new, demonstrating application in CLJS
******* UI dataflow patterns
******* core.async + watching atoms
******* If time, WebSockets
***** Putting the Blocks Together
****** Tetris clone!
** Introduction - CLJS project
*** Slides
**** What do we need for a CLJS project?
***** Web server (ring/http-kit)
****** Serving page frame and compiled JS
***** nREPL
****** To make changes to running application
***** lein-cljsbuild
****** To recompile CLJS when the files change
**** Lein template - 'SPLAT' - to kick us off 
*** Demo
**** `lein new splat clojurex-demo`
**** `lein dev`
**** -> project.clj
***** Splitting of source paths
***** :cljsbuild config
***** Aliases
**** -> handler.clj
***** Page frame - single [:div :#content]
***** Serve JS file
**** -> home.cljs
***** Put a 'Hello world' string on the page
** All Mod Cons - REPL
*** Slides
**** How it works
***** nREPL middleware opens another HTTP route
***** (loop []
****** Browser told to request an HTTP route
****** Response contains JS to execute
****** Browser sends result in next request, waits for next command
****** (recur))
**** Requirements
***** nREPL middleware to cope with CLJS
***** Browser JS snippet to connect to REPL
***** Start CLJS REPL
**** Good ol' Frodo.
*** Demo
**** -> clojurex-demo-config.edn
***** Request :cljs-repl? true from Frodo
**** -> handler.clj
***** Browser JS snippet
**** -> REPL
***** (frodo/cljs-repl) + put to browser desktop
***** Refresh browser
***** (+ 4 4)
***** (js/alert "Hello world!")
***** (js/console.log "Hello world!")
***** /document -body (setAttribute "style" "background:green"))
*** Demo - Grid renderer
**** # Rendering a canvas
***** -> home.cljs
***** *refresh*
**** # Creating 'render-grid!'
***** -> home.cljs - doto
***** -> grid.cljs
****** (def $test-canvas) so that we can REPL test without needing access to global variables
***** *refresh*
***** -> REPL
******   (.getContext $test-canvas "2d")
      (getContext "2d")
      (drawLine 60 20 40 20))
****** (.. $test-canvas
  (getContext "2d")
  (fillRect 20 20 20 20))
**** # Grid REPL code
***** REPL exec inside comment
**** # Moving grid REPL code into 'render-grid!'
***** *refresh*
***** Show grid rendering on refresh
*** Demo - Render tetraminos
**** # Tetraminos skeleton
***** -> tetraminos.cljs
****** Again, def
****** *refresh*
**** # Initial attempt at rendering a cell
***** REPL exec cell
**** # Rendering multiple cells
***** REPL exec cells
***** Bug - overdrawing grid
**** # 'Fixing the bug'
***** REPL exec cells
**** # Creating 'color-cell!' fn
**** # Creating 'color-cells!' fn
**** # Tetraminos skeleton
***** -> tetraminos.cljs
**** # Rendering tetraminos through the REPL
***** *compile*
***** REPL exec
** Experiences and UI Patterns - Widgets
*** Slides (to come)
**** Widgets (state -> channel)
*** Demo - getting shape to move based on state
**** # Skeleton of 'make-board-widget'
***** -> home.cljs
****** Moved canvas functionality out
***** -> board_widget.cljs
***** *refresh*
***** Reset atom from REPL, watch log in browser
***** Similar pattern for single-page hash bind
**** # Rendering shapes when model atom changed in REPL
***** *refresh*
***** REPL exec comment (repeat)
*** Demo - putting keyboard events on channel
**** # Passing the board widget a command channel that logs to console
***** -> home.cljs
****** Creating a command channel, that logs events to console
****** Passing it through to the board widget
***** -> board_widget.cljs
****** 'def'ing command channel to test
***** *refresh*
***** REPL exec (a/put! test-command-ch "Hello ClojureX!")
**** # Putting keypresses on the channel
***** *refresh*
***** Keypresses on canvas should put events on JS console
** Experiences and UI Patterns - Model
*** Demo - Block moving down screen
**** # Creating a game-model ns
***** *refresh*
***** -> home.cljs
****** wiring in the model
***** -> game_model.cljs
****** blank file at the moment.
**** # Got a starting piece
***** Just manipulating vanilla Clojure data structures - could test in a normal REPL
***** *refresh*
**** # Piece moves down screen (and falls off the bottom)
***** Ticker channel uses core.async timeout primitive
*** Demo - movement 
**** # Responding to movement commands
***** Again, only Clojure data structures, REPL testable!
***** *refresh*
***** Demo left/right/rotate, test hitting edge
*** 'Here's one I made earlier
**** # Placing cells when they collide
***** Quick demo, not going to walk through code
***** *refresh*
**** # Implementing 'down'
**** # Clearing rows
**** # Game over condition
**** # Game pausing
**** # Adding 'keys' reference
**** # Focussing the canvas (slight hack!)
**** *refresh*
**** Show changes
*** Demo - cleared rows
**** # Adding in a 'cleared rows' widget
***** *refresh*
***** -> home.cljs
****** Adding in 'cleared-rows-widget'
***** -> cleared_rows_widget
****** Show watch on atom.
** Experiences and UI Patterns - Bindings
*** Slides (to plan)
*** Demo - Multiplayer widget
**** # Skeleton of a multiplayer 'section'
***** -> multiplayer.cljs
***** Splitting out sections of the page -> local reasoning 
***** -> multiplayer_widget.cljs
**** # Implemented static widget
***** 
**** # Binding to the join button
**** # Putting a join event on the channel
**** # Binding the top-scores list
**** # Binding the form's visibility
** Experiences and UI Patterns - WebSockets
*** Demo - websocket echo server
**** # Adding chord dep
***** *RESTART LEIN DEV*
***** Reconnect to REPL, but stay in Clojure
**** # Websocket echo server
***** *recompile multiplayer.clj and handler.clj*
***** Copied from Chord README
**** # Making websockets work
***** *recompile multiplayer.clj*
***** *refresh*
